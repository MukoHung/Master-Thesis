param(
        [string]$subscriptionId,
        [string]$environment, 
        [string]$location,
        [string]$resourceGroupSuffix
)

Import-Module '.\Modules\AzHelpers.psm1' -Force

#Build name of resourcegroup
$resourceGroupName = $resourceGroupSuffix + "-" + $environment

#Set default subscription
Set-Subscription -subscriptionId $subscriptionId

Set-AzDefaults -resourceGroupName $resourceGroupName -location $location

#1. Create resource group
New-ResourceGroup -name $resourceGroupName -location $location

#2 Create DNS zone for timeslize.app
New-DnsZone -name "timeslize.app"

# #3. Deploy Azure Key Vault
$keyVaultName = (Get-RessourceName `
                -resourceProvider KeyVault `
                -increment "00" `
                -environment $environment `
                -location $location)
                
# New-KeyVault -name $keyVaultName

# #4. Deploy storage account
$storageAccountName = (Get-RessourceName `
                -resourceProvider StorageAccount `
                -increment "00" `
                -environment $environment `
                -location $location)

New-StorageAccount -name $storageAccountName

#5. Enable static websites on storage account resource
$frontEndOriginUrl = New-StaticWebsite `
        -storageAccountName $storageAccountName `
        -errorDocument 'error_404.html' `
        -indexDocument 'index.html'

#6. Create CDN profile and endpoint for static website
$cdnProfileName = (Get-RessourceName `
                -resourceProvider CdnProfile `
                -increment "00" `
                -environment $environment `
                -location $location)

New-CdnProfile -profileName $cdnProfileName `
        -sku 'Standard_Microsoft'

$cdnEnpointName = (Get-RessourceName `
                -resourceProvider CdnEndpoint `
                -increment "00" `
                -environment $environment `
                -location $location)

$edgeEndpoint = New-CdnProfileEndpoint `
        -profileName $cdnProfileName `
        -endpointName $cdnEnpointName `
        -originUrl $frontEndOriginUrl `
        -addUrlRewriteRule

#7. Add CNAME for edgeEnpoint in DNS Zone
Update-DnsZone `
        -zoneName 'timeslize.app' `
        -name 'www' `
        -value $edgeEndpoint `
        -addCNAME

#8. Add A record for naked domain to CDN enpoint 
Update-DnsZoneAddARecord `
        -zoneName 'timeslize.app' `
        -name '@' `
        -resourceId (Get-CdnProfileEndpoint -profileName $cdnProfileName -endpointName $cdnEnpointName).id

#8. Custom domain for CDN endpoint
Update-CdnProfileEndpointWithCustomDomain `
        -profileName $cdnProfileName `
        -endpointName $cdnEnpointName `
        -domainName 'timeslize-domain' `
        -hostName 'www.timeslize.app' `
        -enableHttps

Update-CdnProfileEndpointWithCustomDomain `
        -profileName $cdnProfileName `
        -endpointName $cdnEnpointName `
        -domainName 'timeslize-domain-naked' `
        -hostName 'timeslize.app' `

#9. Deploy Cosmos DB resource
$cosmosDbAccountName = (Get-RessourceName `
                -resourceProvider CosmosDb `
                -increment "00" `
                -environment $environment `
                -location $location)
                
New-CosmosDbAccount -name $cosmosDbAccountName

# #10. Create database in cosmos db resource
New-CosmosDbDatabase -databaseName 'timeslize' -cosmosDbAccount $cosmosDbAccountName

# #11. Add needed connectionstring and secret(s) to Key Vault resource
$cosmosDbAccountDetails = Get-CosmosDbAccountDetails -cosmosDbAccount $cosmosDbAccountName

$cosmosDbAccountSecretUri = Set-KeyVaultSecret `
        -keyVaultAccount $keyVaultName `
        -secretName "documentEndpoint" `
        -secretValue $cosmosDbAccountDetails.documentEndpoint

$cosmosDbMasterKeySecretUri = Set-KeyVaultSecret `
        -keyVaultAccount $keyVaultName `
        -secretName "masterKey" `
        -secretValue $cosmosDbAccountDetails.masterKey

$cosmosDbMasterReadKeySecretUri = Set-KeyVaultSecret `
        -keyVaultAccount $keyVaultName `
        -secretName "masterReadKey" `
        -secretValue $cosmosDbAccountDetails.readonlyMasterKey

# #12. Deploy Application Insights resource
$instrumentationKey = New-AppInsights -name 'apin00weeuprod' -kind 'web'

#TODO: We should deploy a app service plan instead of using the autogenerated one
#az functionapp plan create --name 'aspl01weeuprod' --sku 'Y1'
#Not possible yet read ==> https://github.com/Azure/azure-cli/issues/11195

$apiAppName = (Get-RessourceName `
                -resourceProvider FunctionApp `
                -increment "01" `
                -environment $environment `
                -location $location)

#12. Deploy Function App
$apiAppDetails = New-FunctionApp `
        -functionAppName $apiAppName `
        -storageAccountName $storageAccountName `
        -instrumentationKey $instrumentationKey `
        -osType 'Windows' `
        -consumptionPlanLocation 'westeurope'

#Add hostname for function app
Update-DnsZone `
        -zoneName 'timeslize.app' `
        -name 'api' `
        -value $apiAppDetails.defaultHostName `
        -addCNAME
        
New-FunctionAppHostname -functionAppName $apiAppName -hostname 'api.timeslize.app'
        
# TODO: ==> Add TXT 'asuid.api' with value <CUSTOM DOMAIN VERIFICATION ID> in DNS Zone
        
#Add get-secret in Kay Vault for apiApp
$appSettings = @(
        "documentEndpoint=@Microsoft.KeyVault(SecretUri=$($cosmosDbAccountSecretUri))",
        "documentMasterKey=@Microsoft.KeyVault(SecretUri=$($cosmosDbMasterKeySecretUri))",
        "documentMasterReadKey=@Microsoft.KeyVault(SecretUri=$($cosmosDbMasterReadKeySecretUri))"
)

New-FunctionAppSettings -functionAppname $apiAppName -appSettings $appSettings

#Grant Function app get-secret access in Key Vault
Set-KeyVaultPolicy -keyVaultAccount $keyVaultName -adObjectId $apiAppDetails.managedIdentityId -permissions 'get'

#Grant Azure CDN get-secret access in Key Vault (this is for fetching certificate information)
Set-KeyVaultPolicy -keyVaultAccount $keyVaultName -adObjectId '205478c0-bd83-4e1b-a9d6-db63a3e1e1c8' -permissions 'get'